name: Validate & Compare Cure

on:
  push:

jobs:
  validate-and-compare:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hjson

      - name: Validate JSON files
        run: |
          import hjson, os, sys

          def validate_json(filepath):
              if not os.path.isfile(filepath):
                  print(f"❌ {filepath} missing")
                  return False
              try:
                  with open(filepath, "r") as f:
                      hjson.load(f)
                  print(f"✅ {filepath} is valid")
                  return True
              except Exception as e:
                  print(f"❌ {filepath} is not valid: {e}")
                  return False

          # Validate all JSON files
          files = [
              ".vscode/settings.json",
              ".vscode/extensions.json",
              ".devcontainer/devcontainer.json"
          ]

          if not all(validate_json(file) for file in files):
              sys.exit(1)
        shell: python {0}

      - name: Check required configurations
        run: |
          import hjson, sys

          # Check settings.json for editor.fontSize
          with open(".vscode/settings.json", "r") as f:
              settings = hjson.load(f)
          if "editor.fontSize" not in settings:
              print("❌ key \"editor.fontSize\" not found in settings.json")
              sys.exit(1)
          print("✅ Required settings found")

          # Check extensions.json for tonybaloney.vscode-pets
          with open(".vscode/extensions.json", "r") as f:
              extensions = hjson.load(f)
          if "tonybaloney.vscode-pets" not in extensions["recommendations"]:
              print("❌ key \"tonybaloney.vscode-pets\" not found in extensions.json")
              sys.exit(1)
          print("✅ Required extensions found")
        shell: python {0}

      - name: Ensure LICENSE exists
        run: |
          test -f LICENSE || (echo "❌ LICENSE file missing" && exit 1)

      - name: Ensure solution.txt exists and matches
        run: |
          test -f solution.txt || (echo "❌ solution.txt missing" && exit 1)

          trimmed=$(<solution.txt xargs)
          echo "Trimmed solution.txt → '$trimmed'"

          if [ "$trimmed" != "Drug B" ]; then
            echo "❌ Mismatch: solution.txt does not match the expected cure" >&2
            exit 1
          fi

          echo "✅ Match: solution.txt equals the expected cure"
